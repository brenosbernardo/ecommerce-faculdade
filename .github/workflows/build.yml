name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
          
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
          
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      # Depuração: listar o conteúdo do diretório
      - name: List directory contents
        shell: powershell
        run: dir

      # Instalar o ReportGenerator (necessário para cobertura de teste)
      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
          
      - name: Run SonarQube analysis with coverage
        shell: powershell
        run: |
          cd Ecommerce.Backend\Ecommerce.API
          
          # Início da análise SonarQube
          ..\..\.sonar\scanner\dotnet-sonarscanner begin /k:"chatbot" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}" /d:sonar.scanner.scanAll=false /d:sonar.coverageReportPaths="TestResults/coverage.cobertura.xml"
          
          # Build do projeto
          dotnet build
          
          # Execução dos testes com cobertura
          dotnet test --collect:"XPlat Code Coverage" --results-directory:./TestResults
          
          # Depurar: listar resultados dos testes
          dir ./TestResults
          
          # Conversão do relatório de cobertura
          reportgenerator -reports:TestResults/**/coverage.cobertura.xml -targetdir:TestResults/CoverageReport -reporttypes:Cobertura
          
          # Finalização da análise SonarQube
          ..\..\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
